stages:
  - Artifacts
  - Cross-Cloud
  - Deprovision
  - End-To-End
  - Update-Dashboard

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export KUBECONFIG=$(pwd)/data/packet/kubeconfig
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
      export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - >
    if [ "$CI_JOB_NAME" == "Build-Source" ]; then
      source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd
    elif [ "$CI_JOB_NAME" == "Dashboard" ]; then
      source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd
    else
     echo 'Use container Ruby' 
    fi

Build-Source:
  image: crosscloudci/debian-docker:latest
  stage: Artifacts
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build -f Dockerfile.deps -t crosscloudci/k8s-infra-deps:latest .
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"

Provisioning:
  image: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
  stage: Cross-Cloud
  script:
    - >
      if [ $PIPELINE_RELEASE_TYPE == "stable" ] && [ $ARCH == "amd64" ]; then
         export INFRA_PIPELINE="$STABLE_AMD64_JOB"
      elif [ $PIPELINE_RELEASE_TYPE == "stable" ] && [ $ARCH == "arm64" ]; then
         export INFRA_PIPELINE="$STABLE_ARM64_JOB"
      elif [ $PIPELINE_RELEASE_TYPE == "head" ] && [ $ARCH == "amd64" ]; then
         export INFRA_PIPELINE="$HEAD_AMD64_JOB"
      else
         export INFRA_PIPELINE="$HEAD_ARM64_JOB"
      fi
    - mkdir ~/.docker && echo "$DOCKER_AUTH" > ~/.docker/config.json
    - echo "$SSH_KEY" > .id_rsa && chmod 400 .id_rsa
    - eval $(ssh-agent) && ssh-add .id_rsa
    - pushd /k8s-infra
    - echo /k8s-infra/bin/k8sinfra generate_config --arch="$ARCH" --release-type="$PIPELINE_RELEASE_TYPE" --infra-job="$INFRA_PIPELINE" -o /tmp/cluster.yml
    - /k8s-infra/bin/k8sinfra generate_config --arch="$ARCH" --release-type="$PIPELINE_RELEASE_TYPE" --infra-job="$INFRA_PIPELINE" -o /tmp/cluster.yml
    - cat /tmp/cluster.yml
    - >
      if /k8s-infra/bin/k8sinfra provision --config-file '/tmp/cluster.yml'; then
        popd
        mkdir ./data
        cp /tmp/cluster.yml ./data
        cp -r /k8s-infra/data/mycluster ./data
        mkdir -p ./data/packet
        cp /k8s-infra/data/mycluster/artifacts/admin.conf ./data/packet/kubeconfig
        pushd /k8s-infra
      else
        popd
        mkdir ./data
        cp /tmp/cluster.yml ./data
        cp -r /k8s-infra/data/mycluster ./data
        exit 1
      fi
    - export KUBECONFIG=/k8s-infra/data/mycluster/artifacts/admin.conf
    - >
      if [ "$ARCH" == "arm64" ]; then
         kubectl apply -f ./manifests/helm-rbac.yml
         helm init --service-account tiller --tiller-image=jessestuart/tiller --override spec.selector.matchLabels.'name'='tiller',spec.selector.matchLabels.'app'='helm' --output yaml | sed 's@apiVersion: extensions/v1beta1@apiVersion: apps/v1@' | kubectl apply -f -
      else
         echo 'skip helm deploy when ARCH is amd64, Kubespray will install helm.'
      fi
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

Kubernetes_destroy:
  image: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
  stage: Deprovision
  when: manual
  script:
    - echo "$SSH_KEY" > .id_rsa && chmod 400 .id_rsa
    - eval $(ssh-agent) && ssh-add .id_rsa
    - cp -r ./data /k8s-infra/lib/provisioner/kubespray/kubespray/
    - cd /k8s-infra/lib/provisioner/kubespray/kubespray/
    # Don't fail when running deprovisoning, packet networking always fails to come back up.
    - ansible-playbook -i ./data/mycluster/hosts.yml -e "reset_confirmation='yes'" --become --become-user=root reset.yml || true

Dashboard:
  image: crosscloudci/debian-docker
  stage: Update-Dashboard
  script:
    - echo 'true'
